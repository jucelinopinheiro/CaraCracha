@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<div class="container">
    <p><span id="errorMsg"></span></p>
    <div class="row">
        <div class="col-lg-6">
            <h4>Câmera</h4>
            <div>
                <video id="video" playsinline autoplay></video>
            </div>
           <div>
                <button class="btn btn-primary" id="btnCapture"><i class="fa-solid fa-camera"></i> Foto</button>
           </div>
        </div>

        <div class="col">
            <h4>Foto</h4>
            <div>
                <canvas style="border:solid 1px #ddd;background-color:white;" id="canvas" width="300" height="300"></canvas>
            </div>
            <div>
                <button type="button" class="btn btn-success" id="btnSave" name="btnSave"><i class=" fa-solid fa-upload"></i> Salvar Foto</button>
            </div>
        </div>
    </div>
</div> 

@section scripts {
    <script type="text/javascript">

        var video = document.querySelector("#video");

        // Basic settings for the video to get from Webcam
        const constraints = {
            audio: false,
            video: {
                width: 300, height: 300 
            }
        };

        /*
            facingMode: {
                exact: 'environment'
            }
        */

        // This condition will ask permission to user for Webcam access
        if (navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia(constraints)
                .then(function (stream) {
                    video.srcObject = stream;
                })
                .catch(function (err0r) {
                    console.log("Something went wrong!");
                });
        }

        function stop(e) {
            var stream = video.srcObject;
            var tracks = stream.getTracks();

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];
                track.stop();
            }
            video.srcObject = null;
        }

        // Below code to capture image from Video tag (Webcam streaming)
        $("#btnCapture").click(function () {
            var canvas = document.getElementById('canvas');
            var context = canvas.getContext('2d');

            // Capture the image into canvas from Webcam streaming Video element
            context.drawImage(video, 0, 0);
        });

        // Upload image to server - ajax call - with the help of base64 data as a parameter
        $("#btnSave").click(function () {

            // Below new canvas to generate flip/mirron image from existing canvas
            var destinationCanvas = document.createElement("canvas");
            var destCtx = destinationCanvas.getContext('2d');


            destinationCanvas.height = 300;
            destinationCanvas.width = 300;

            destCtx.translate(video.videoWidth, 0);
            destCtx.scale(-1, 1);
            destCtx.drawImage(document.getElementById("canvas"), 0, 0);

            // Get base64 data to send to server for upload
            var imagebase64data = destinationCanvas.toDataURL("image/png");
            imagebase64data = imagebase64data.replace('data:image/png;base64,', '');
            $.ajax({
                type: 'POST',
                url: './captureimg/UploadImage',
                data: JSON.stringify(imagebase64data),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function () {
                    alert('Sucesso no upload da imagem');
                }
            });
        });
    </script>
}
